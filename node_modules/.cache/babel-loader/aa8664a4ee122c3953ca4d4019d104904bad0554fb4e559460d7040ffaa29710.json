{"ast":null,"code":"var _jsxFileName = \"/Users/hakima/Desktop/web-dev/my-react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\n// import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [triviaQuestion, setTriviaQuestion] = useState([]);\n  const [correctAnswer, setCorrectAnswer] = useState(\"\");\n  const [currentPoints, setCurrentPoints] = useState(0);\n  const [allPossibleAnswers, setAllPossibleAnswers] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  //combines correct and incorrect answer into single array\n  async function combineAllAnswers(incorrectAnswers, correctAnswer) {\n    let allAnswers = [];\n    incorrectAnswers.map(item => {\n      item.incorrect_answers.map(incorrectAnswer => {\n        allAnswers.push(incorrectAnswer);\n      });\n    });\n    allAnswers.push(correctAnswer);\n    //Randomize order of answers in array\n    allAnswers.sort(() => Math.random() - 0.5);\n    setAllPossibleAnswers(allAnswers);\n  }\n\n  //Make api call to trivia api\n  async function getTriviaData() {\n    //Set loading boolean to true so that we know to show loading text\n    setLoading(true);\n\n    //Make trivia api call using axios\n    const resp = await axios.get(\"https://opentdb.com/api.php?amount=1\");\n    setTriviaQuestion(resp.data.results);\n    setCorrectAnswer(resp.data.results[0].correct_answer);\n\n    //Combines correct and incorrect answers into single array\n    await combineAllAnswers(resp.data.results, resp.data.results[0].correct_answer);\n\n    //Set loading boolean to false so that we know to show trivia question\n    setLoading(false);\n  }\n  useEffect(() => {\n    getTriviaData();\n  }, []);\n  function verifyAnswer(selectedAnswer) {\n    //If the selected answer equals the correct answer, then we get the next trivia quesiton and increase the current points by 1\n    if (selectedAnswer === correctAnswer) {\n      getTriviaData();\n      setCurrentPoints(currentPoints + 1);\n    } else {\n      //If the selected answer does not equal the correct answer, decreaes the current points by 1\n      setCurrentPoints(currentPoints - 1);\n    }\n  }\n\n  //Converts html code to regular characters\n  function removeCharacters(question) {\n    return question.replace(/(&quot\\;)/g, \"\\\"\").replace(/(&rsquo\\;)/g, \"\\\"\").replace(/(&#039\\;)/g, \"\\'\").replace(/(&amp\\;)/g, \"\\\"\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: loading ? \"Trivia Question Loading...\" : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Current Points: \", currentPoints]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), triviaQuestion.map((triviaData, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: removeCharacters(triviaData.question)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: allPossibleAnswers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => verifyAnswer(answer),\n                children: removeCharacters(answer)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 23\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 51\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XzQFlxcxtEazhmVL/YIljhx24rA=\");\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n\n// const TimerComponent = () => {\n//   const [count, setCount] = useState(0);\n\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       setCount((prevCount) => prevCount + 1);\n//     }, 1000);\n\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <h1>Timer: {count}</h1>\n//     </div>\n//   );\n// };\n\n// const App = () => {\n//   const [showTimer, setShowTimer] = useState(true);\n\n//   const toggleTimer = () => {\n//     setShowTimer(!showTimer);\n//   };\n\n//   return (\n//     <div>\n//       <button onClick={toggleTimer}>\n//         {showTimer ? 'Unmount Timer' : 'Mount Timer'}\n//       </button>\n//       {showTimer && <TimerComponent />}\n//     </div>\n//   );\n// };\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","App","_s","triviaQuestion","setTriviaQuestion","correctAnswer","setCorrectAnswer","currentPoints","setCurrentPoints","allPossibleAnswers","setAllPossibleAnswers","loading","setLoading","combineAllAnswers","incorrectAnswers","allAnswers","map","item","incorrect_answers","incorrectAnswer","push","sort","Math","random","getTriviaData","resp","axios","get","data","results","correct_answer","verifyAnswer","selectedAnswer","removeCharacters","question","replace","className","children","fileName","_jsxFileName","lineNumber","columnNumber","triviaData","index","answer","onClick","_c","$RefreshReg$"],"sources":["/Users/hakima/Desktop/web-dev/my-react-app/src/App.js"],"sourcesContent":["import './App.css';\n// import axios from 'axios';\nimport { useEffect, useState } from 'react';\n\n\n\nfunction App() {\n\n  const [triviaQuestion, setTriviaQuestion] = useState([]);\n  const [correctAnswer, setCorrectAnswer] = useState(\"\");\n  const [currentPoints, setCurrentPoints] = useState(0);\n  const [allPossibleAnswers, setAllPossibleAnswers] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  //combines correct and incorrect answer into single array\n  async function combineAllAnswers(incorrectAnswers, correctAnswer) {\n    let allAnswers = [];\n    incorrectAnswers.map((item) => {\n      item.incorrect_answers.map((incorrectAnswer) => {\n        allAnswers.push(incorrectAnswer)\n      });\n    });\n    allAnswers.push(correctAnswer);\n    //Randomize order of answers in array\n    allAnswers.sort(() => Math.random() - 0.5);\n    setAllPossibleAnswers(allAnswers);\n  }\n\n  //Make api call to trivia api\n  async function getTriviaData() {\n    //Set loading boolean to true so that we know to show loading text\n    setLoading(true);\n\n    //Make trivia api call using axios\n    const resp = await axios.get(\"https://opentdb.com/api.php?amount=1\");\n\n    setTriviaQuestion(resp.data.results);\n    setCorrectAnswer(resp.data.results[0].correct_answer);\n\n    //Combines correct and incorrect answers into single array\n    await combineAllAnswers(resp.data.results, resp.data.results[0].correct_answer);\n\n    //Set loading boolean to false so that we know to show trivia question\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    getTriviaData();\n  }, []);\n\n  function verifyAnswer(selectedAnswer) {\n    //If the selected answer equals the correct answer, then we get the next trivia quesiton and increase the current points by 1\n    if (selectedAnswer === correctAnswer) {\n      getTriviaData();\n      setCurrentPoints(currentPoints + 1);\n    } else {\n      //If the selected answer does not equal the correct answer, decreaes the current points by 1\n      setCurrentPoints(currentPoints - 1);\n    }\n  }\n\n  //Converts html code to regular characters\n  function removeCharacters(question) {\n    return question.replace(/(&quot\\;)/g, \"\\\"\").replace(/(&rsquo\\;)/g, \"\\\"\").replace(/(&#039\\;)/g, \"\\'\").replace(/(&amp\\;)/g, \"\\\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {loading ? \"Trivia Question Loading...\" : <div>\n          <div>\n            Current Points: {currentPoints}\n          </div>\n          <br />\n\n          {triviaQuestion.map((triviaData, index) =>\n            <div key={index}>\n              <div>\n                {removeCharacters(triviaData.question)}\n              </div>\n              <br />\n              <div>\n                {\n                  allPossibleAnswers.map((answer, index) =>\n                    <div key={index}>\n                      <button key={index} onClick={() => verifyAnswer(answer)} >\n                        {removeCharacters(answer)}\n                      </button>\n                    </div>\n                  )\n                }\n              </div>\n            </div>\n          )}\n        </div>\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n// import React, { useState, useEffect } from 'react';\n\n// const TimerComponent = () => {\n//   const [count, setCount] = useState(0);\n\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       setCount((prevCount) => prevCount + 1);\n//     }, 1000);\n\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <h1>Timer: {count}</h1>\n//     </div>\n//   );\n// };\n\n// const App = () => {\n//   const [showTimer, setShowTimer] = useState(true);\n\n//   const toggleTimer = () => {\n//     setShowTimer(!showTimer);\n//   };\n\n//   return (\n//     <div>\n//       <button onClick={toggleTimer}>\n//         {showTimer ? 'Unmount Timer' : 'Mount Timer'}\n//       </button>\n//       {showTimer && <TimerComponent />}\n//     </div>\n//   );\n// };\n\n// export default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}